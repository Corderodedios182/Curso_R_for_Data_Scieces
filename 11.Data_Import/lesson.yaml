- Class: meta
  Course: Curos_R_for_Data_Sciences
  Lesson: 10_Data_Import
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.4

- Class: text
  Output: Hasta el momento hemos trabajado con datos precargados en R. En la vida real sera necesario ir por nuestros datos, esencialmente existen 6 tipos de fuentes de informacion, archivos de texto, exceles, Bases de Datos SQL y NoSQL, Paginas Web, Software especiales como SAS,SPSS,STATA y APIs.

- Class: text
  Output: En esta leccion solo introducire la importacion de datos con las funciones basicas para arhivos csv y exceles.
  
- Class: text
  Output: Comenzemos trabajando con archivos csv. Ocupando la funcion read.csv(), solo es necesario colocar la ruta y el nombre de nuestro archivo veamos un ejemplo;

- Class: cmd_question
  Output: Ejecuta en Consola; swimming <- read.csv("https://assets.datacamp.com/production/repositories/453/datasets/0badb39b50c7daf000698efbca476716db7c1a6f/swimming_pools.csv")
  CorrectAnswer: swimming <- read.csv("https://assets.datacamp.com/production/repositories/453/datasets/0badb39b50c7daf000698efbca476716db7c1a6f/swimming_pools.csv")
  AnswerTests: omnitest(correctExpr='swimming <- read.csv("https://assets.datacamp.com/production/repositories/453/datasets/0badb39b50c7daf000698efbca476716db7c1a6f/swimming_pools.csv")')
  Hint: Ejecuta en Consola; swimming <- read.csv("https://assets.datacamp.com/production/repositories/453/datasets/0badb39b50c7daf000698efbca476716db7c1a6f/swimming_pools.csv")

- Class: cmd_question
  Output: Ejecuta en Consola; str(swimming)
  CorrectAnswer: str(swimming)
  AnswerTests: omnitest(correctExpr='str(swimming)')
  Hint: Ejecuta en Consola; str(swimming)

- Class: text
  Output: En el ejemplo anterior solo colocamos la ruta donde se localiza el archivo "swimming_pools.csv", observa la estructura del marco de datos te podras percatar que las 2 primeras columnas se importaron como tipos de datos Factores. En ocasiones querras importar estos datos como tipo caracter. Agreguemos el parametro stringsAsFactors = FALSE y veamos que sucede.

- Class: cmd_question
  Output: Ejecuta en Consola; pools <- read.csv("https://assets.datacamp.com/production/repositories/453/datasets/0badb39b50c7daf000698efbca476716db7c1a6f/swimming_pools.csv", stringsAsFactors = FALSE)
  CorrectAnswer: pools <- read.csv("https://assets.datacamp.com/production/repositories/453/datasets/0badb39b50c7daf000698efbca476716db7c1a6f/swimming_pools.csv", stringsAsFactors = FALSE)
  AnswerTests: omnitest(correctExpr='pools <- read.csv("https://assets.datacamp.com/production/repositories/453/datasets/0badb39b50c7daf000698efbca476716db7c1a6f/swimming_pools.csv", stringsAsFactors = FALSE)')
  Hint: Ejecuta en Consola; pools <- read.csv("https://assets.datacamp.com/production/repositories/453/datasets/0badb39b50c7daf000698efbca476716db7c1a6f/swimming_pools.csv", stringsAsFactors = FALSE)

- Class: cmd_question
  Output: Ejecuta en Consola; str(pools)
  CorrectAnswer: str(pools)
  AnswerTests: omnitest(correctExpr='str(pools)')
  Hint: Ejecuta en Consola; str(pools)

- Class: text
  Output: Observa como la estructura de nuesto Marco de datos a cambiado, importando las 2 primeras columnas como tipo caracter. El mundo exterior esta lleno de distintos formatos de Bases de Datos, R tiene multiples funciones que facilitan el trabajo de importacion. Por ejemplo, adicional a csv tenemos archivos de texto, la lectura de estos archivos se realiza con la funcion read.delim().

- Class: text
  Output: Ahora leamos un arhivo txt, solo colocaremos la ruta dentro de la funcion read.delim()

- Class: cmd_question
  Output: Ejecuta en Consola; hotdogs <- read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt")
  CorrectAnswer: hotdogs <- read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt")
  AnswerTests: omnitest(correctExpr='hotdogs <- read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt")')
  Hint: Ejecuta en Consola; hotdogs <- read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt")

- Class: text
  Output: En este caso nuestro archivo no tiene nombres de columnas, Â¿Como lo resolvemos?

- Class: cmd_question
  Output: Ejecuta en Consola; head(hotdogs)
  CorrectAnswer: head(hotdogs)
  AnswerTests: omnitest(correctExpr='head(hotdogs)')
  Hint: Ejecuta en Consola; head(hotdogs)

- Class: text
  Output: Agregaremos parametros para colocar nombre y tipo de datos. Especificando parametro; header = FALSE (Respeta una nueva fila colocando nombres estandares. Ejemplo; X1,X2,X3), parametro col.names = c("type","calories","sodium") (colocamos el nombre a las columnas), parametro colClasses = c("factor","NULL", "numeric") (Tipo de datos que queremos)

- Class: cmd_question
  Output: Ejecuta en Consola; hotdogs <- read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", header = FALSE, col.names = c("type","calories","sodium"),colClasses = c("factor","numeric", "numeric"))
  CorrectAnswer: hotdogs <- read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", header = FALSE, col.names = c("type","calories","sodium"),colClasses = c("factor","numeric", "numeric"))
  AnswerTests: omnitest(correctExpr='hotdogs <- read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", header = FALSE, col.names = c("type","calories","sodium"),colClasses = c("factor","numeric", "numeric"))')
  Hint: Ejecuta en Consola; hotdogs <- read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", header = FALSE, col.names = c("type","calories","sodium"),colClasses = c("factor","numeric", "numeric"))

- Class: cmd_question
  Output: Ejecuta en Consola; str(hotdogs)
  CorrectAnswer: str(hotdogs)
  AnswerTests: omnitest(correctExpr='str(hotdogs)')
  Hint: Ejecuta en Consola; str(hotdogs)

- Class: text
  Output: Hemos importado correctamente el arhivo hotdogs.txt

- Class: text
  Output: De igual forma podemos controlar que parte del archivo plano queremos importar, parametro skip = 2 especifica el numero de linea que esta ignorando en el archivo antes de comenzar a leer y nrows = 3 numero de lineas que realmente esta importando.
  
- Class: cmd_question
  Output: Ejecuta en Consola; read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", header = FALSE, skip = 2, nrows = 3)
  CorrectAnswer: read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", header = FALSE, skip = 2, nrows = 3)
  AnswerTests: omnitest(correctExpr='read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", header = FALSE, skip = 2, nrows = 3)')
  Hint: Ejecuta en Consola; read.delim("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", header = FALSE, skip = 2, nrows = 3)

- Class: text
  Output: En ocasiones tenemos csv muy pesados que tardan mucho en importar, para estos apuros tenemos la funcion fread() es extramadamente rapida y contiene argumentos similares. Esta funcion es parte del paquete data.table tal vez es posible que necesites instalarlo en ese caso ejecuta; install.package("data.table") y despues ejecuta; library(data.table)

- Class: cmd_question
  Output: Ejecuta en Consola; library(data.table)
  CorrectAnswer: library(data.table)
  AnswerTests: omnitest(correctExpr='library(data.table)')
  Hint: Ejecuta en Consola; library(data.table)

- Class: cmd_question
  Output: Ejecuta en Consola; head(fread("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", select = c(1,2)))
  CorrectAnswer: head(fread("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", select = c(1,2)))
  AnswerTests: omnitest(correctExpr='head(fread("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", select = c(1,2)))')
  Hint: Ejecuta en Consola; head(fread("https://assets.datacamp.com/production/repositories/453/datasets/3e5a732b4467c1cbed6a8e8e7a1c9eec3fc86c58/hotdogs.txt", select = c(1,2)))

- Class: text
  Output: Un parametro util de la funcion fread(), select = c(1,2) permite especifica la columna deseada

- Class: text
  Output: Veamos como importar un Archivos de excel. Trabajar con archivos de excel es distinto que leer un csv o un archivo de texto, ya que contiene multiples hojas con informacion. Existen distitas paqueterias para importar exceles, comanzaremos ocupando la paqueteria readxl en caso de no tenerla instalada ejecuta; install.packages("readxl").

- Class: cmd_question
  Output: Ejecuta en Consola; library(readxl)
  CorrectAnswer: library(readxl)
  AnswerTests: omnitest(correctExpr='library(readxl)')
  Hint: Ejecuta en Consola; library(readxl)

- Class: text
  Output: Dentro del curso tenemos un archivo de excel para trabajar, sigue los siguientes pasos para colocarnos en la ruta adecuada.
  
- Class: text
  Output: Primero identifica la ruta donde tienes guardada la carpeta "Curso_R_for_Data_Scieces", dentro de ella vive una carpeta llamada "10_Data_Import" dentro encotraremos el archivo "urbanpop.xlsx". Nos posicionaremos en la ruta donde vive nuestro arhivo "urbanpop.xlsx", con la funcion setwd() posicionaremos a R para leer el excel. Por ejemplo; setwd("~/git_workspace/Curso_R_for_Data_Scieces/10_Data_Import/")

- Class: cmd_question
  Output: Ejecuta en Consola "getwd()" para validar que estas en la ruta correcta.
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr='getwd()')
  Hint: Ejecuta en Consola; getwd()

- Class: text
  Output: Si te posicionaste de manera correcta deberas ver el archivo urbanpop.xlsx, con la funcion list.files() pudes saber el listado de archivo, en caso de no ver el archivo de excel "urbanpop.xlsx". Revisa la ruta que colocaste en la funcion setwd(), tal vez colocaste mal la ruta.
  
- Class: cmd_question
  Output: Ejecuta en Consola; list.files()
  CorrectAnswer: list.files()
  AnswerTests: omnitest(correctExpr='list.files()')
  Hint: Ejecuta en Consola; list.files()

- Class: text
  Output: Si logras ver el archivo "urbanpop.xlsx". Estamos listos para usar las funciones de excel.
  
- Class: text
  Output: El primer paso para leer informacion de un excel es identificando el nombres de las hojas que contiene el arhcivo. Comenzemos leyendo las hojas del archivo con la funcion excel_sheets("urbanpop.xlsx")

- Class: cmd_question
  Output: En caso de estar seguro que nos encontramos en la ruta correcta para trabajar con el archivo "urbanpop.xlsx" Ejecuta en Consola; excel_sheets("urbanpop.xlsx").
  CorrectAnswer: excel_sheets("urbanpop.xlsx")
  AnswerTests: omnitest(correctExpr='excel_sheets("urbanpop.xlsx")')
  Hint: Revisa la ruta donde te encuentras trabajando con getwd(), valida que puedas ver el archivo urbanpop.xlsx con la funcion list.files(), Posicionate con la funcion setwd() en la ruta correcta.

- Class: text
  Output: El arhivo "urbanpop.xlsx" contiene 3 hojas, cada hoja contiene informacion de distintos aÃ±os.

- Class: text
  Output: Â¿Como vamos a importaremos cada hoja?, la funcion read_excel("urbanpop.xlsx") solo necesita del parametro "sheet = 1" (Lee la primera hoja del archivo "urbanpop.xlsx")

- Class: cmd_question
  Output: Ejecuta en Consola; head(read_excel("urbanpop.xlsx", sheet = 1))
  CorrectAnswer: head(read_excel("urbanpop.xlsx", sheet = 1))
  AnswerTests: omnitest(correctExpr='head(read_excel("urbanpop.xlsx", sheet = 1))')
  Hint: Ejecuta en Consola; head(read_excel("urbanpop.xlsx", sheet = 1))

- Class: text
  Output: Efectivamente la primera hoja contiene datos de 1960 a 1966, si quisieramos leer todas las hojas y almacenarlas todas juntas en un mismo conjunto de datos. Podemos comenzar alamcenarlas en una lista. Donde el elemento de cada lista es una hoja del archivo "urbanpop.xlsx".

- Class: text
  Output: Crearemos una lista, donde cada elemento representa una hoja de datos del arhivo "urbanpop.xlsx"
  
- Class: cmd_question
  Output: Ejecuta en Consola; pop_list <- list(read_excel("urbanpop.xlsx", sheet = 1),read_excel("urbanpop.xlsx", sheet = 2),read_excel("urbanpop.xlsx", sheet = 3))
  CorrectAnswer: pop_list <- list(read_excel("urbanpop.xlsx", sheet = 1),read_excel("urbanpop.xlsx", sheet = 2),read_excel("urbanpop.xlsx", sheet = 3))
  AnswerTests: omnitest(correctExpr='pop_list <- list(read_excel("urbanpop.xlsx", sheet = 1),read_excel("urbanpop.xlsx", sheet = 2),read_excel("urbanpop.xlsx", sheet = 3))')
  Hint: Ejecuta en Consola; pop_list <- list(read_excel("urbanpop.xlsx", sheet = 1),read_excel("urbanpop.xlsx", sheet = 2),read_excel("urbanpop.xlsx", sheet = 3))

- Class: cmd_question
  Output: Ejecuta en Consola; head(pop_list)
  CorrectAnswer: head(pop_list)
  AnswerTests: omnitest(correctExpr='head(pop_list)')
  Hint: Ejecuta en Consola; head(pop_list)

- Class: text
  Output: En el codigo anterior genero una lista donda cada elemento corresponde a una hoja del arhivo "urbanpop.xlsx". Sin, embargo, cargar cada hoja manualmente y luego combinarlas en una lista puede ser bastante tedioso. Por suerte puede automatizar esto con la funcion lapply(). Si no tienes experiencia con lapply() hecha un vistazo con ?lapply.

- Class: cmd_question
  Output: Ejecuta en Consola; pop_list <- lapply(excel_sheets("urbanpop.xlsx"), read_excel, path = "urbanpop.xlsx")
  CorrectAnswer: pop_list <- lapply(excel_sheets("urbanpop.xlsx"), read_excel, path = "urbanpop.xlsx")
  AnswerTests: omnitest(correctExpr='pop_list <- lapply(excel_sheets("urbanpop.xlsx"), read_excel, path = "urbanpop.xlsx")')
  Hint: Ejecuta en Consola; pop_list <- lapply(excel_sheets("urbanpop.xlsx"), read_excel, path = "urbanpop.xlsx")

- Class: text
  Output: La funcion lapply() nos ahorro mucho codigo, Podemos ver que como primer argumento colocamos cada hoja del archivo, despues la funcion read_excel() y por ultimpo colocamos el archivo de excel.
  
- Class: cmd_question
  Output: Ejecuta en Consola; head(pop_list)
  CorrectAnswer: head(pop_list)
  AnswerTests: omnitest(correctExpr='head(pop_list)')
  Hint: Ejecuta en Consola; head(pop_list)

- Class: text
  Output: Tal vez no estemos acostumbrados a trabajar con listas y queremos tener todo en una mismo marco de datos, podriamos leer cada hoja de manera independiente y unirlo todo con la funcion cbind(). Todo dependera de la estructura de nuestro archivo de excel. Trabajar con archivos de excel requiere de cuidado y orden, conocer las hojas y el posicionamiento de la informacion.

- Class: text
  Output: Funcion read_excel(), tiene argumentos similares a las demas funciones. En ocasiones sera necesario especificar el numero de fila que desea comenzar a leer, especificar nombre de columnas, tipos de datos, etc.

- Class: text
  Output: Existen diversas paqueterias para leer archivos de excel, por ejemplo paqueteria gdata contiene la funcion read.xls(), otra paqueteria altamente usada es XLConnect.
  
- Class: text
  Output: Te recomiendo ver mas sobre XLConeect, con esta paqueteria existe un paso adicional que es crear una conexion entre el archivo de excel y R, primero se ejecuta funcion loadWorkbook() segundo getSheets() y por ultimo readWorksheet().

- Class: text
  Output: Una ventaja de la paqueteria XLConnect es que la conexion inicial que crea con la funcion loadWorkbook(), permite manipular el excel desde R exportando datos en las hojas o creando nuevas hojas. Revise funciones createSheet(), writeWorksheet(), saveWorkbook(), renameSheet(), removeSheet().

- Class: text
  Output: Tambien tenemos formas de importar datos desde la web, las funciones read_csv(), read_tsv() permiten leer marcos de datos almacenado en algun servidor de la web que tiene libre acceso.

- Class: text
  Output: En los ejemplos anteriores colocabamos una ruta http:// que nos dirigia a un servidor S3 de Amazon Web Services.

- Class: cmd_question
  Output: Ejecuta en Consola; pools <- read_csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv")
  CorrectAnswer: pools <- read_csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv")
  AnswerTests: omnitest(correctExpr='pools <- read_csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv")')
  Hint: Ejecuta en Consola; pools <- read_csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv")
  
- Class: text
  Output: En ocasiones veras escrito http y https, esto nos indica el protocolo un protocolo de seguridad en el caso de https:// significa "protocolo de transferencia de hipertexto seguro". 

- Class: cmd_question
  Output: Ejecuta en Consola; pools1 <- read.csv("https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv")
  CorrectAnswer: pools1 <- read.csv("https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv")
  AnswerTests: omnitest(correctExpr='pools1 <- read.csv("https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv")')
  Hint: Ejecuta en Consola; pools1 <- read.csv("https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv")  

- Class: text
  Output: Importar datos a R es sencillo, una vez que domines las funciones read_csv(), read_excel(), etc... Iras ampliando tu portafolio de herramientas para importar datos como ejemplo puedes revisar conexiones con MySQL, paginas web o APIs.
  
  
  


